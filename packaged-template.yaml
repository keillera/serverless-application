AWSTemplateFormatVersion: '2010-09-09'
Description: Create Lambda function by using AWS SAM.
Globals:
  Function:
    Environment:
      Variables:
        ARTICLE_INFO_TABLE_NAME:
          Ref: ArticleInfo
        TABLE_NAME:
          Ref: SamSampleDynamoTable
    MemorySize: 256
    Runtime: python3.6
    Timeout: 15
Resources:
  ArticleInfo:
    Properties:
      AttributeDefinitions:
      - AttributeName: article_id
        AttributeType: S
      - AttributeName: status
        AttributeType: S
      - AttributeName: sort_key
        AttributeType: N
      GlobalSecondaryIndexes:
      - IndexName: status-sort_key-index
        KeySchema:
        - AttributeName: status
          KeyType: HASH
        - AttributeName: sort_key
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
      KeySchema:
      - AttributeName: article_id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    Type: AWS::DynamoDB::Table
  ArticleInfoRecent:
    Properties:
      CodeUri: s3://sample-sam-resource/a539c4dff3c5b906084ddd8806a9d548
      Events:
        Api:
          Properties:
            Method: get
            Path: /articles/recent
            RestApiId:
              Ref: RestApi
          Type: Api
      Handler: recent.lambda_handler
      Role: arn:aws:iam::090169530579:role/lambda_dynamo_access
    Type: AWS::Serverless::Function
  IdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::Join:
          - ''
          - - cognito-idp.
            - Ref: AWS::Region
            - .amazonaws.com/
            - Ref: UserPool
      IdentityPoolName: SamplePool
    Type: AWS::Cognito::IdentityPool
  RestApi:
    Properties:
      DefinitionBody:
        basePath: /
        definitions:
          ArticleInfo:
            properties:
              article_id:
                type: string
              created_at:
                type: string
              eye_catch_url:
                type: string
              overview:
                type: string
              title:
                type: string
              user_id:
                type: string
            type: object
        info:
          title: dev-api
          version: 1.0.0
        paths:
          /articles/recent:
            get:
              description: "\u6700\u65B0\u8A18\u4E8B\u4E00\u89A7\u60C5\u5831\u3092\
                \u53D6\u5F97"
              parameters:
              - description: "\u516C\u958B\u30BF\u30A4\u30DF\u30F3\u30B0\u306B\u3088\
                  \u308B\u8A18\u4E8B\u53D6\u5F97\u306E\u91CD\u8907\u3092\u3055\u3051\
                  \u308B\u305F\u3081\u306B\u4F7F\u7528\u3059\u308B\u3002\u6307\u5B9A\
                  \u6642\u523B\u4EE5\u524D\u306B\u516C\u958B\u3055\u308C\u305F\u6642\
                  \u523B\u3067\u306E\u4E00\u89A7\u3092\u53D6\u5F97\u3059\u308B\u3002"
                format: date-time
                in: query
                name: published_before
                required: false
                type: string
              - description: "\u53D6\u5F97\u4EF6\u6570"
                in: query
                minimum: 1
                name: limit
                required: false
                type: integer
              - description: "\u53D6\u5F97\u4F4D\u7F6E"
                in: query
                minimum: 0
                name: offset
                required: false
                type: integer
              responses:
                '200':
                  description: "\u6700\u65B0\u8A18\u4E8B\u4E00\u89A7"
                  schema:
                    items:
                      $ref: '#/definitions/ArticleInfo'
                    type: array
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_templates
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticleInfoRecent.Arn}/invocations
          /users:
            get:
              consumes:
              - application/json
              description: 'Get lists of all users.

                '
              produces:
              - application/json
              responses:
                '200':
                  description: responce when request succeed
                  schema:
                    items:
                      properties:
                        name:
                          example: foo
                          type: string
                      type: object
                    type: array
                '404':
                  description: responce when request is failed
                  schema:
                    properties:
                      error:
                        example: 404 Not Found
                        type: string
                      message:
                        example: Can not find resources
                        type: string
                    type: object
              security:
              - cognitoUserPool: []
              summary: user index
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_templates
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserIndex.Arn}/invocations
            post:
              consumes:
              - application/json
              description: 'Create user

                '
              parameters:
              - description: User name.
                in: body
                name: name
                required: true
                schema:
                  properties:
                    name:
                      example: foo
                      type: string
                  type: object
              produces:
              - application/json
              responses:
                '200':
                  description: responce when request succeed
                  schema:
                    properties:
                      name:
                        example: foo
                        type: string
                    type: object
                '400':
                  description: responce when request is failed
                  schema:
                    properties:
                      error:
                        example: 400 Bad Request
                        type: string
                      message:
                        example: Invalid parameter
                        type: string
                    type: object
                '404':
                  description: responce when request is failed
                  schema:
                    properties:
                      error:
                        example: 404 Not Found
                        type: string
                      message:
                        example: Can not find resources
                        type: string
                    type: object
              security:
              - cognitoUserPool: []
              summary: user create
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_templates
                responses:
                  default:
                    statusCode: '200'
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreate.Arn}/invocations
        schemes:
        - https
        securityDefinitions:
          cognitoUserPool:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              providerARNs:
              - arn:aws:cognito-idp:ap-northeast-1:090169530579:userpool/ap-northeast-1_MFKzdjrgD
              type: cognito_user_pools
            x-amazon-apigateway-authtype: cognito_user_pools
        swagger: '2.0'
      StageName: dev
    Type: AWS::Serverless::Api
  SamSampleDynamoTable:
    Properties:
      PrimaryKey:
        Name: name
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    Type: AWS::Serverless::SimpleTable
  UserPool:
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      AliasAttributes:
      - email
      - phone_number
      AutoVerifiedAttributes:
      - email
      EmailVerificationMessage: Your verification code is {####}.
      EmailVerificationSubject: Your verification code
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: false
      Schema:
      - AttributeDataType: String
        DeveloperOnlyAttribute: false
        Mutable: true
        Name: email
        Required: true
        StringAttributeConstraints:
          MaxLength: '2048'
          MinLength: '0'
      - AttributeDataType: String
        DeveloperOnlyAttribute: false
        Mutable: true
        Name: phone_number
        Required: true
        StringAttributeConstraints:
          MaxLength: '2048'
          MinLength: '0'
      SmsAuthenticationMessage: Your authentication code is {####}.
      SmsVerificationMessage: Your verification code is {####}.
      UserPoolName:
        Ref: AWS::StackName
    Type: AWS::Cognito::UserPool
  UserPoolClient:
    Properties:
      ClientName: SampleClient
      GenerateSecret: false
      ReadAttributes:
      - email
      - phone_number
      UserPoolId:
        Ref: UserPool
      WriteAttributes:
      - email
      - phone_number
    Type: AWS::Cognito::UserPoolClient
Transform: AWS::Serverless-2016-10-31
