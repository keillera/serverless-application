AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Create Lambda function by using AWS SAM.

Globals:
  Function:
    Runtime: python3.6
    Timeout: 15
    MemorySize: 256
    Environment:
      Variables:
        TABLE_NAME: !Ref SamSampleDynamoTable
        ARTICLE_INFO_TABLE_NAME: !Ref ArticleInfo

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          UnusedAccountValidityDays: 7
      AliasAttributes:
        - email
        - phone_number
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: "Your verification code is {####}."
      EmailVerificationSubject: "Your verification code"
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: false
      UserPoolName:
        Ref: AWS::StackName
      Schema:
        - AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: "email"
          StringAttributeConstraints:
            MaxLength: "2048"
            MinLength: "0"
          Required: true
        - AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          Name: "phone_number"
          StringAttributeConstraints:
            MaxLength: "2048"
            MinLength: "0"
          Required: true
      SmsAuthenticationMessage:  "Your authentication code is {####}."
      SmsVerificationMessage: "Your verification code is {####}."
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: SampleClient
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        ReadAttributes:
          - email
          - phone_number
        WriteAttributes:
          - email
          - phone_number
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: SamplePool
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName:
            Fn::Join:
            - ""
            - - cognito-idp.
              - Ref: AWS::Region
              - .amazonaws.com/
              - Ref: UserPool
      AllowUnauthenticatedIdentities: false
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: "2.0"
        info:
          title: dev-api
          version: 1.0.0
        basePath: /
        schemes:
          - https
        definitions:
          ArticleInfo:
            type: object
            properties:
              article_id:
                type: string
              user_id:
                type: string
              title:
                type: string
              overview:
                type: string
              eye_catch_url:
                type: string
              created_at:
                type: string
        paths:
          /articles/recent:
            get:
              description: "最新記事一覧情報を取得"
              parameters:
              - name: "published_before"
                in: "query"
                description: "公開タイミングによる記事取得の重複をさけるために使用する。指定時刻以前に公開された時刻での一覧を取得する。"
                required: false
                type: "string"
                format: "date-time"
              - name: "limit"
                in: "query"
                description: "取得件数"
                required: false
                type: "integer"
                minimum: 1
              - name: "offset"
                in: "query"
                description: "取得位置"
                required: false
                type: "integer"
                minimum: 0
              responses:
                "200":
                  description: "最新記事一覧"
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ArticleInfo'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArticleInfoRecent.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /users:
            get:
              summary: user index
              description: |
                Get lists of all users.
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "responce when request succeed"
                  schema:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        name:
                          type: "string"
                          example: "foo"
                "404":
                  description: "responce when request is failed"
                  schema:
                    type: "object"
                    properties:
                      error:
                        type: "string"
                        example: "404 Not Found"
                      message:
                        type: "string"
                        example: "Can not find resources"
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserIndex.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            post:
              summary: user create
              description: |
                Create user
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
              - name: name
                in: body
                description: User name.
                required: true
                schema:
                  type: object
                  properties:
                    name:
                      type: "string"
                      example: "foo"
              responses:
                "200":
                  description: "responce when request succeed"
                  schema:
                    type: "object"
                    properties:
                      name:
                        type: "string"
                        example: "foo"
                "400":
                  description: "responce when request is failed"
                  schema:
                    type: "object"
                    properties:
                      error:
                        type: "string"
                        example: "400 Bad Request"
                      message:
                        type: "string"
                        example: "Invalid parameter"
                "404":
                  description: "responce when request is failed"
                  schema:
                    type: "object"
                    properties:
                      error:
                        type: "string"
                        example: "404 Not Found"
                      message:
                        type: "string"
                        example: "Can not find resources"
              security:
                - cognitoUserPool: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCreate.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          cognitoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - arn:aws:cognito-idp:ap-northeast-1:090169530579:userpool/ap-northeast-1_MFKzdjrgD
  UserIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Role: arn:aws:iam::090169530579:role/lambda_dynamo_access
      CodeUri: 'functions/users/index.py'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref RestApi
  UserCreate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: create.lambda_handler
      Role: arn:aws:iam::090169530579:role/lambda_dynamo_access
      CodeUri: 'functions/users/create.py'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref RestApi
  SamSampleDynamoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: name
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  ArticleInfoRecent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: recent.lambda_handler
      Role: arn:aws:iam::090169530579:role/lambda_dynamo_access
      CodeUri: ./deploy/article_info-index.zip
      Events:
        Api:
          Type: Api
          Properties:
            Path: /articles/recent
            Method: get
            RestApiId: !Ref RestApi
  ArticleInfo:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: article_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: sort_key
          AttributeType: N
      KeySchema:
        - AttributeName: article_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: status-sort_key-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: sort_key
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2